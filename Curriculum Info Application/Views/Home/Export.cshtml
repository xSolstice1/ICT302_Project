@{
    Dictionary<string, string> tableHeaders = ViewBag.TableHeaders ?? new Dictionary<string, string>();
    List<KeyValuePair<string, List<string>>> tableRecords = ViewBag.TableRecord ?? new List<KeyValuePair<string, List<string>>>();
    int currentPage = ViewBag.CurrentPage ?? 1;
    int totalPages = ViewBag.TotalPages ?? 1;
}

@if (TempData["ExportSuccess"] != null)
{
    <div class="alert alert-success">
        @TempData["ExportSuccess"]
    </div>
}

@if (TempData["ImportError"] != null)
{
    <div class="alert alert-danger">
        @TempData["ImportError"]
    </div>
}

@if (TempData["ExportError"] != null)
{
    <div class="alert alert-danger">
        @TempData["ExportError"]
    </div>
}

<div class="export-container">
    <div class="search-gadget">
        <h4>Filter By</h4>
        @foreach (var header in tableHeaders)
        {
            <div class="mb-3">
                <label for="@header.Key">@header.Value:</label>
                <input type="text" id="@header.Key" class="form-control" placeholder="Search by @header.Value">
            </div>
        }
        <button type="button" class="btn btn-primary" onclick="filterTable()">Search(F2)</button>
        <button type="button" class="btn btn-secondary" onclick="clearFilters()">Clear(F3)</button>
    </div>

    <div class="list-content">
        <div class="pagination">
            <ul class="pagination">
                @if (currentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", "Export", new { page = 1 })">First</a>
                    </li>
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", "Export", new { page = currentPage - 1 })">Previous</a>
                    </li>
                }
                <h4>   Page @currentPage of @totalPages   </h4>
                @if (currentPage < totalPages)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", "Export", new { page = currentPage + 1 })">Next</a>
                    </li>
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", "Export", new { page = totalPages })">Last</a>
                    </li>
                }
            </ul>
        </div>
        <button id="exportButton" class="btn btn-success">Export to Excel</button>
        <table class="table" id="exportTable">
            <thead>
                <tr>
                    @foreach (var header in tableHeaders)
                    {
                        <th style="white-space:nowrap !important;">
                            <input type="checkbox" class="column-checkbox" id="@header.Key" checked /> @header.Value
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
            @foreach (var recordPair in tableRecords)
            {
                <tr style="line-height:auto !important;">
                    @foreach (var value in recordPair.Value)
                    {
                        <td>@value</td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

<script>
    document.getElementById('exportButton').addEventListener('click', function () {
        window.location.href = '@Url.Action("ExportToCsv", "Export")';
    });

    document.addEventListener('keydown', function (event) {
        // Check if the pressed key is F2 (key code 113)
        if (event.keyCode === 113) {
            event.preventDefault(); // Prevent the default browser behavior for F2 (e.g., opening developer tools)

            // Call the search function
            filterTable();
        }
        // Check if the pressed key is F3 (key code 114)
        if (event.keyCode === 114) {
            event.preventDefault(); // Prevent the default browser behavior for F2 (e.g., opening developer tools)

            // Call the search function
            clearTable();
        }
    });

    // Function to filter the table based on user input
    function filterTable() {
        // Get the filter values
        var filters = {};
        var filterInputs = document.querySelectorAll('.search-gadget input[type="text"]');

        filterInputs.forEach(function (input) {
            var key = input.id;
            var value = input.value.trim().toLowerCase(); // Trim and convert to lowercase

            // Only add to filters if the value is not empty
            if (value) {
                filters[key] = value;
            }
        });

        // Redirect to the index action with the filter parameters
        var url = '@Url.Action("Index", "Export")'; // Change the URL to point to the Index action
        url += '?filters=' + JSON.stringify(filters);
        window.location.href = url;
    }


    // Function to clear the table filters and show all records
    function clearTable() {
        // Clear the filter input values
        var filterInputs = document.querySelectorAll('.search-gadget input[type="text"]');
        filterInputs.forEach(function (input) {
            input.value = '';
        });

        // Redirect to the index action without any filters
        var url = '@Url.Action("Index", "Export")'; // Change the URL to point to the Index action
        window.location.href = url;
    }

    document.getElementById('exportButton').addEventListener('click', function () {
        // Get the selected columns
        var selectedColumns = [];
        var checkboxes = document.getElementsByClassName('column-checkbox');
        for (var i = 0; i < checkboxes.length; i++) {
            if (checkboxes[i].checked) {
                selectedColumns.push(checkboxes[i].id);
            }
        }

        if (selectedColumns.length === 0) {
            // Display an error message and return
            alert('Please select at least one header.');
            return;
        }

        // Get the filter values
        var filters = {};
        var filterInputs = document.querySelectorAll('.search-gadget input[type="text"]');
        filterInputs.forEach(function (input) {
            var key = input.id;
            var value = input.value.toLowerCase();
            filters[key] = value;
        });

        // Redirect to the export action with the selected columns and filters
        var url = '@Url.Action("ExportToCsv", "Export")';
        url += '?selectedColumns=' + selectedColumns.join(',');
        url += '&filters=' + JSON.stringify(filters);
        window.location.href = url;
    });
</script>

